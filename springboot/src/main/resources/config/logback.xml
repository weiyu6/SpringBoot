<?xml version="1.0" encoding="UTF-8"?>
<Configuration monitorInterval="1" status="warn" strict="true" name="LogConfig">
    <Properties>
    　　　<Property name="logbasedir">logs</Property>  <!-- 放日志的位置 -->
    　　　<Property name="log.layout">[%date{yyyy-MM-dd HH:mm:ss.SSS}][%thread][%-5level] [%file:%line]%msg%n</Property>  <!-- 日志打印的格式 -->
        <Property name="logLevel" >DEBUG</Property>
    </Properties>
    <!--此处使用了两种类型的appender,RollingFile为滚动类型,满足策略条件后会新建文件夹记录 -->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Appender type="Console" name="STDOUT">
            <Target>SYSTEM_OUT</Target>
            <!--输出日志的格式-->
            <Layout type="PatternLayout" pattern="${log.layout}"/>
        </Appender>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <Appender type="RollingFile" name="FILE" fileName="${logbasedir}/jutap-search.log"
                  filePattern = "${logbasedir}/jutap-search-%d{yyyy-MM-dd}.log">
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <Layout type="PatternLayout">
                <Charset>UTF-8</Charset>
                <Pattern>${log.layout}</Pattern>
            </Layout>
        </Appender>

        <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <Appender type="RollingFile" name="ExceptionLog" fileName="${logbasedir}/exception-search.log"
                  filePattern = "${logbasedir}/exception-search-%d{yyyy-MM-dd}.log">
            <Policies>
                <TimeBasedTriggeringPolicy />
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <Layout type="PatternLayout">
                <Charset>UTF-8</Charset>
                <Pattern>${log.layout}</Pattern>
            </Layout>
        </Appender>
    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <Logger name="exception" level="error" additivity="false">
            <AppenderRef ref="ExceptionLog"/>
        </Logger>

        <Root level="${logLevel}">
            <!-- 所有的info信息输出到一下两个位置 -->
            <AppenderRef ref="STDOUT"/>
            <AppenderRef ref="FILE"/>
        </Root>
        <Logger name="com.garfield.learn" level="debug"/>
        <Logger name="com.garfield.learnp" level="debug"/>
    </Loggers>

</Configuration>